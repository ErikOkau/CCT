// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GuildRank {
  MEMBER
  OFFICER
  LEADER
  ADMIN
}

enum UserRole {
  USER
  ADMIN
}

enum BattleType {
  RED_VELVET_DRAGON
  AVATAR_OF_DESTINY
}

model Season {
  id        String    @id @default(cuid())
  name      String    @unique // e.g., "20-2"
  startDate DateTime
  endDate   DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  guildResults   GuildResult[]
  battleResults  BattleResult[]
  battleAnalyses BattleAnalysis[]

  @@map("seasons")
}

model Guild {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  guildResults   GuildResult[]
  players        Player[]
  battleAnalyses BattleAnalysis[]

  @@map("guilds")
}

model Player {
  id        String    @id @default(cuid())
  name      String
  level     Int
  title     String?
  guildRank GuildRank
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  guildId       String
  guild         Guild          @relation(fields: [guildId], references: [id], onDelete: Cascade)
  battleResults BattleResult[]

  @@unique([name, guildId])
  @@map("players")
}

model GuildResult {
  id               String   @id @default(cuid())
  seasonId         String
  guildId          String
  totalDamage      BigInt
  totalBattles     Int
  participantCount Int
  rank             Int?
  score            Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  season Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  guild  Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([seasonId, guildId])
  @@map("guild_results")
}

model BattleResult {
  id         String     @id @default(cuid())
  seasonId   String
  playerId   String
  battleType BattleType
  battles    Int
  damage     BigInt
  rank       Int?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  season Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([seasonId, playerId, battleType])
  @@map("battle_results")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model BattleAnalysis {
  id               String   @id @default(cuid())
  seasonId         String
  guildId          String
  analysisDate     DateTime @default(now())
  totalPlayers     Int
  highestDamage    BigInt
  averageDamage    BigInt
  totalBattlesDone Int
  guildScore       Int
  redVelvetStats   Json? // Store as JSON for flexibility
  avatarStats      Json? // Store as JSON for flexibility
  livingAbyssStats Json? // Store as JSON for flexibility
  insights         String[]
  playerData       Json? // Store complete player data as JSON
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  season Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  guild  Guild  @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([seasonId, guildId])
  @@map("battle_analyses")
}
